const express = require ("express"); // HERE WE REQUIRE THE EXPRESS FOR BACKEND 
const path = require("path");

const {createServer}= require ("node:http");// HERE WE REQUIRE THE CREATESERVER FROM THE IN-BUILT NODE.JS HTTP MODULE FOR CREATING AND MANAGING THE HTTP SERVER

const {Server}= require("socket.io"); // THE SERVER CLASS OR MODULE OR COMPONENT IS BASICALLY USED FOR CREATING AND MANGING THE WEBSOCKETS SERVER IN SOCKET.IO

const app = express();// HERE WE CREATE A EXPRESS APPLICATION 

const server = createServer(app);// HERE WE DEFINE THE THE SERVER TO CONNECT WITH THE SOCKET.IO BECAUSE INTIALLY SOCKET.IO WORKS ON THE THE CONNECTION OF HTTP AND HTTPS 

const io =new Server(server);// HERE WE ATTACH THE SOCKET.IO WITH THE HTTP SERVER. HERE WE CREATE A NEW SOCKET.IO CONNECTION WITH THE HTTP SERVER BY USING THIS LINE WE CAN MANAGE BOTH THE HTTP SERVER AND SOCKET OR WEBSOCKET SERVER ON THE SAME SERVER INSTANCE 
// HERE THE IO VARAIBLE IS BASICALLY THE INSTANCE OF THE SOCKET SERVER IT CAN ALL THE WEBSOCKET CONNECTION AN DMANAGE IT.


app.get("/",(req,res)=>{

    res.sendFile(path.join(__dirname,"index.html"));
   
});

// HANDLE THE WEBSOCKET CONNECTIONS 

io.on("connection",(socket)=>{

    console.log("THE NEW USER IS NOw CONNECTED "+socket.id);

    // HANDLE DISCONNECTION OF THE EVERY SOCKET 
    socket.on("disconnect",()=>{

        console.log("THE USER IS DISCONNECTED "+socket.id);
    })

})


server.listen(3000,()=>{
    console.log("NOW THE SERVER IS LISTENING AT THE PORT 3000")
})

